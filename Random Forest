# ===============================================================

file_path <- "D:\\Thesis\\Proposal\\Analysis\\TOP-BIOMARKERS\\Results\\Top200_Biomarkers_WeightedScore.csv"
data <- read.csv(file_path, header = TRUE)
d <- data$gene

data_dir <- "D:/Thesis/Proposal/Thesis_Data/GSE169246/files"

names <- c("Pre_P001_b","Pre_P002_b","Pre_P002_t", "Pre_P004_b", "Pre_P004_t", "Pre_P005_b", 
           "Pre_P005_t", "Pre_P007_b", "Pre_P007_t", "Pre_P008_b", "Pre_P010_b", "Pre_P011_b", 
           "Pre_P013_b","Pre_P013_t", "Pre_P016_b", "Pre_P016_t" 
)  

sample_dirs <- list.dirs(data_dir, recursive = TRUE, full.names = TRUE)
sample_dirs <- sample_dirs[basename(sample_dirs) %in% names]

seurat_list <- list()
for (dir in sample_dirs) {
  sample_name <- basename(dir)
  counts <- Read10X(data.dir = dir)
  colnames(counts) <- paste(sample_name, colnames(counts), sep = "-")
  seurat_obj <- CreateSeuratObject(counts = counts, project = sample_name)
  seurat_list[[sample_name]] <- seurat_obj@assays$RNA@counts
}

combined_counts <- do.call(cbind, seurat_list)
filtered_counts <- combined_counts[rownames(combined_counts) %in% d, ]

saveRDS(filtered_counts, "D:/Thesis/Proposal/Analysis/Machine Learning/Results/filtered_counts_matrix.rds")
filtered_counts <- readRDS("D:/Thesis/Proposal/Analysis/Machine Learning/Results/filtered_counts_matrix.rds")

cell_names <- colnames(combined_counts)
sample_ids <- sapply(strsplit(cell_names, "-"), `[`, 1)
str(cell_names)

unique_samples <- unique(sample_ids)
cell_labels <- data.frame(Cell = character(), Label = character(), stringsAsFactors = FALSE)

valid_labels <- c("progressive", "non-progressive")
for (sample in unique_samples) {
  repeat {
    label <- readline(prompt = paste0("Enter label for sample '", sample, "' (progressive/non-progressive): "))
    label <- trimws(tolower(label))  # Clean spaces and convert to lowercase
    if (label %in% valid_labels) break
    cat("Invalid input. Please enter only 'progressive' or 'non-progressive'.\n")
  }
  cells <- cell_names[sample_ids == sample]
  sample_df <- data.frame(Cell = cells, Label = label, stringsAsFactors = FALSE)
  cell_labels <- rbind(cell_labels, sample_df)
}

saveRDS(cell_labels,
        "D:/Thesis/Proposal/Analysis/Machine Learning/Results/cell_labels.rds")
cell_labels <- readRDS("D:/Thesis/Proposal/Analysis/Machine Learning/Results/cell_labels.rds")

write.csv(cell_labels, "D:\\Thesis\\Proposal\\Analysis\\Machine Learning\\Results\\cell_labels.csv", row.names = FALSE)
fwrite(cell_labels,
       file = "D:/Thesis/Proposal/Analysis/Machine Learning/Results/cell_labels_fast.csv",
       row.names = FALSE)

# ============================================ Classification with Random Forest
cell_labels <- readRDS("D:/Thesis/Proposal/Analysis/Machine Learning/Results/cell_labels.rds")
seurat_list <- list()
for (dir in sample_dirs) {
  sample_name <- basename(dir)
  counts <- Read10X(data.dir = dir)
  colnames(counts) <- paste(sample_name, colnames(counts), sep = "-")
  seurat_obj <- CreateSeuratObject(counts = counts, project = sample_name)
  seurat_list[[sample_name]] <- seurat_obj@assays$RNA@counts
}
combined_counts <- do.call(cbind, seurat_list)

#  Gene filtering (Top 200)
filtered_counts <- combined_counts[rownames(combined_counts) %in% d, ]
saveRDS(filtered_counts, "D:/Thesis/Proposal/Analysis/Machine Learning/Results/RF/filtered_counts_matrix.rds")
filtered_counts <- readRDS("D:/Thesis/Proposal/Analysis/Machine Learning/Results/RF/filtered_counts_matrix.rds")

X <- as.data.frame(t(filtered_counts))  # rows = cells
X$Cell <- rownames(X)
df <- merge(X, cell_labels, by = "Cell")
df$Label <- trimws(tolower(df$Label))
df <- df[df$Label %in% c("progressive", "non-progressive"), ]
print(table(df$Label))
stopifnot(length(unique(df$Label)) > 1)

X <- df[, !(names(df) %in% c("Cell", "Label"))]
X <- data.frame(lapply(X, as.numeric))
y <- as.factor(df$Label)

preProc <- preProcess(X, method = c("center", "scale"))
X_scaled <- predict(preProc, X)
nzv <- nearZeroVar(X_scaled)
X_filtered <- X_scaled[, -nzv]

set.seed(123)
train_idx <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X_filtered[train_idx, ]
X_test  <- X_filtered[-train_idx, ]
y_train <- y[train_idx]
y_test  <- y[-train_idx]

rf_model <- randomForest(x = X_train, y = y_train, ntree = 500, importance = TRUE)
pred <- predict(rf_model, X_test)
cm <- confusionMatrix(pred, y_test, positive = "progressive")
print(cm)

# ⬇️ Save data (feature matrix + labels)
X_labeled <- X_filtered
X_labeled$Label <- y
X_labeled$Cell <- rownames(X_filtered)
X_labeled <- X_labeled[, c("Cell", "Label", setdiff(colnames(X_labeled), c("Cell", "Label")))]
write.csv(X_labeled, "D:/Thesis/Proposal/Analysis/Machine Learning/Results/RF/rf_results.csv", row.names = FALSE)

# ⬇️ Save Random Forest model as RDS
saveRDS(rf_model, file = "D:/Thesis/Proposal/Analysis/Machine Learning/Results/RF/rf_model.rds")

save(rf_model, X_filtered, y, cm, file = "D:/Thesis/Proposal/Analysis/Machine Learning/Results/RF/RF_model_outputs.RData")
load("D:/Thesis/Proposal/Analysis/Machine Learning/Results/RF/RF_model_outputs.RData")

save.image("D:/Thesis/Proposal/Analysis/Machine Learning/Results/RF/RF_final_workspace.RData")
load("D:/Thesis/Proposal/Analysis/Machine Learning/Results/RF/RF_final_workspace.RData")

sink("D:/Thesis/Proposal/Analysis/Machine Learning/Results/RF/randomforest_metrics.txt")
cat("\n📊 Random Forest Performance Metrics:\n")
cat("Accuracy:", round(cm$overall["Accuracy"], 3), "\n")
cat("Sensitivity (Recall):", round(cm$byClass["Sensitivity"], 3), "\n")
cat("Specificity:", round(cm$byClass["Specificity"], 3), "\n")
cat("Precision:", round(cm$byClass["Precision"], 3), "\n")
cat("F1-score:", round(cm$byClass["F1"], 3), "\n")
sink()
metrics <- readLines("D:/Thesis/Proposal/Analysis/Machine Learning/Results/RF/randomforest_metrics.txt")
cat(metrics, sep = "\n")

# Gene importance (top genes)
importance_vals <- importance(rf_model)
importance_df <- data.frame(
  Gene = rownames(importance_vals),
  Importance = importance_vals[, "MeanDecreaseGini"],
  stringsAsFactors = FALSE
)

# Save the top 200-ranked genes
write.csv(importance_df, "D:/Thesis/Proposal/Analysis/Machine Learning/Results/RF/randomforest_gene_importance.csv", row.names = FALSE)

# Top 20 important genes
top20 <- head(importance_df[order(-importance_df$Importance), ], 20)
print(top20$Gene)

top20_plot <- ggplot(top20, aes(x = reorder(Gene, Importance), y = Importance, fill = Importance)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  scale_fill_gradient(low = "#FFDDC1", high = "#FF5733") +
  labs(title = "Top 20 Important Genes (Random Forest)",
       x = "Gene", y = "Importance", fill = "Importance") +
  theme_classic()
ggsave("D:/Thesis/Proposal/Analysis/Machine Learning/Results/RF/randomforest_top20_rf_gene_importance.png",
       plot = top20_plot,
       width = 10, height = 6, dpi = 300)

print(top20_plot)
write.xlsx(top20,
           file = "D:/Thesis/Proposal/Analysis/Machine Learning/Results/RF/randomforest_top20_rf_genes.xlsx",
           rowNames = FALSE)
